---
import { getLQIPInfo } from '../utils/lqip/astro-lqip';
import type { ResponsiveImagesManifest } from '../utils/responsive-images';

// 반응형 이미지 매니페스트 안전 로딩 (Vercel 환경 호환)
let responsiveImagesManifest: ResponsiveImagesManifest = {};
try {
  const { loadResponsiveImagesManifest } = await import('../utils/responsive-images');
  responsiveImagesManifest = await loadResponsiveImagesManifest();
} catch (error) {
  console.warn('반응형 이미지 매니페스트 로드 실패, 폴백 모드로 진행:', error);
}

export interface Props {
  src: string | { src: string; [key: string]: unknown };
  alt: string;
  slug?: string;
  width?: number;
  height?: number;
  widths?: number[];
  sizes?: string;
  quality?: number;
  format?: 'webp' | 'avif' | 'png' | 'jpg';
  full?: boolean; // 풀사이즈 표시 여부
}

const { 
  src, 
  alt, 
  width = 800, 
  height,
  // quality = 80,
  // format = 'webp',
  full = false // 기본값은 80% 크기
} = Astro.props;

// 고유한 이미지 ID 생성
const imageId = `img-${Math.random().toString(36).substr(2, 9)}`;

// URL에서 slug 추출
const urlPath = Astro.url.pathname;
const slugMatch = urlPath.match(/\/blog\/([^/]+)/);
const detectedSlug = slugMatch ? slugMatch[1] : undefined;
const finalSlug = Astro.props.slug || detectedSlug;

// src가 객체인지 문자열인지 확인하고 적절한 값 추출
const imageSrc = typeof src === "object" ? src.src : src;

// 블로그 포스트의 첫 번째 이미지 판단 (간단한 휴리스틱)
const isBlogPost = urlPath.includes('/blog/') && !urlPath.endsWith('/blog/');
const isLikelyFirstImage = isBlogPost && (
  imageSrc.startsWith('./') || 
  imageSrc.includes('@assets/images/') ||
  imageSrc.includes('assets/images/')
);

// 기기별 최적화된 반응형 이미지 설정 (더 세밀한 크기 조정)
const responsiveConfig = full ? {
  // 풀사이즈 (100%) - 큰 이미지들
  widths: [480, 768, 1024, 1280, 1536],
  sizes: "(max-width: 480px) 100vw, (max-width: 768px) 100vw, (max-width: 1024px) 1024px, 1280px",
  type: 'full'
} : {
  // 컴팩트 크기 (80%) - 작은 이미지들  
  widths: [320, 480, 640, 768, 960],
  sizes: "(max-width: 480px) 95vw, (max-width: 768px) 80vw, (max-width: 1024px) 640px, 640px",
  type: 'compact'
};

const { sizes, type } = responsiveConfig;

// 직접 생성한 반응형 이미지 사용 (Astro Image 시스템 대신)
let optimizedImages: { src: string; width: number; size: number }[] = [];
let fallbackImageSrc: string = imageSrc;
let useOptimizedImages = false;

// 이미지 파일명 추출 (경로에서)
const imageFileName = imageSrc.split('/').pop() || imageSrc;
const cleanFileName = imageFileName.replace('./', '');

// Astro가 처리한 해시 붙은 파일명에서 원본 파일명 복원
const restoreOriginalFileName = (filename: string) => {
  // Astro 해시 패턴들:
  // 1. filename.hash_hash.ext (예: blog-written-by-ai.7p_-XgL_.webp)
  // 2. filename.hash.ext (예: ask-to-gpt.DjQr6XwQ.webp)
  
  // 패턴 1: 언더바가 포함된 해시 (hash_hash)
  const hashPatternWithUnderscore = /\.[a-zA-Z0-9_-]+_[a-zA-Z0-9_-]+(\.[a-zA-Z0-9]+)$/;
  
  // 패턴 2: 단순 해시 (8자 이상의 알파벳+숫자 조합)
  const hashPatternSimple = /\.[a-zA-Z0-9]{8,}(\.[a-zA-Z0-9]+)$/;
  
  if (hashPatternWithUnderscore.test(filename)) {
    // 언더바 포함 패턴 제거
    const restored = filename.replace(hashPatternWithUnderscore, '$1');
    console.log(`🔄 해시 제거 (패턴1): ${filename} → ${restored}`);
    return restored;
  } else if (hashPatternSimple.test(filename)) {
    // 단순 해시 패턴 제거
    const restored = filename.replace(hashPatternSimple, '$1');
    console.log(`🔄 해시 제거 (패턴2): ${filename} → ${restored}`);
    return restored;
  }
  
  return filename;
};

const originalFileName = restoreOriginalFileName(cleanFileName);

console.log(`🔍 이미지 검색: slug=${finalSlug}, fileName=${cleanFileName} → 원본: ${originalFileName}`);

if (finalSlug && responsiveImagesManifest[finalSlug] && responsiveImagesManifest[finalSlug][originalFileName]) {
  const imageData = responsiveImagesManifest[finalSlug][originalFileName];
  const responsiveData = imageData.responsive[type];
  
  console.log(`✅ 매니페스트에서 이미지 발견: ${originalFileName}`);
  
  // WebP 우선, 없으면 JPG 사용
  const formatData = (type === 'compact' || type === 'full') && responsiveData[type]
    ? responsiveData[type].webp || responsiveData[type].jpg
    : undefined;
  
  if (formatData && formatData.length > 0) {
    optimizedImages = formatData.map((img: { path: string; width: number; size: number }) => ({
      src: img.path,
      width: img.width,
      size: img.size
    }));
    
    // 폴백 이미지 (가장 큰 사이즈 또는 원하는 크기에 가장 가까운 것)
    const targetWidth = width || 800;
    const closestImage = formatData.reduce((prev: { width: number; path: string }, curr: { width: number; path: string }) => 
      Math.abs(curr.width - targetWidth) < Math.abs(prev.width - targetWidth) ? curr : prev
    );
    
    fallbackImageSrc = closestImage.path;
    useOptimizedImages = true;
    
    console.log(`🎯 반응형 이미지 준비 완료: ${optimizedImages.length}개 크기, 폴백: ${fallbackImageSrc}`);
  }
} else {
  console.log(`⚠️  매니페스트에서 이미지를 찾을 수 없음: ${finalSlug}/${originalFileName} (원본: ${cleanFileName})`);
}

// 새로운 LQIP 시스템 사용 - 서버사이드에서 처리 (SSG에 완전히 포함)
const lqipInfo = await getLQIPInfo(imageSrc, finalSlug);
const { renderInfo, aspectRatio, hasData } = lqipInfo;

// 이미지 높이 계산 (aspectRatio가 있는 경우)
let calculatedHeight = height;
if (!height && aspectRatio !== 'auto') {
  const ratio = parseFloat(aspectRatio);
  if (!isNaN(ratio)) {
    calculatedHeight = Math.round(width / ratio);
  }
}

// LQIP 스타일 처리 - 서버사이드에서 완전히 렌더링 (SSG에 포함)
const lqipStyle = typeof renderInfo.style === 'string' 
  ? renderInfo.style 
  : Object.entries(renderInfo.style).map(([key, value]) => `${key}: ${value}`).join('; ');

// LCP 이미지에 대한 고도화된 preload 힌트 생성
const shouldPreload = useOptimizedImages && isLikelyFirstImage;
const preloadHref = shouldPreload && fallbackImageSrc ? fallbackImageSrc : null;

// 반응형 preload를 위한 이미지 크기별 srcset 생성
let preloadSrcset = '';
let preloadSizes = '';
if (shouldPreload && optimizedImages.length > 0) {
  preloadSrcset = optimizedImages.map(img => `${img.src} ${img.width}w`).join(', ');
  preloadSizes = sizes || '(max-width: 480px) 95vw, (max-width: 768px) 90vw, (max-width: 1024px) 80vw, 640px';
}
---

<!-- LCP 이미지에 대한 고도화된 preload 힌트 (SSG에 포함) -->
{shouldPreload && preloadHref && (
  <>
    {/* 기본 preload */}
    <link rel="preload" as="image" href={preloadHref} />
    
    {/* 반응형 preload (srcset 지원하는 브라우저용) */}
    {preloadSrcset && (
      <link 
        rel="preload" 
        as="image" 
        href={preloadHref}
        imagesrcset={preloadSrcset}
        imagesizes={preloadSizes}
      />
    )}
    
    {/* DNS prefetch for image domain */}
    <link rel="dns-prefetch" href="//flikary-git-preview-0724-fliklabs-projects.vercel.app" />
  </>
)}

<div
  class={`lqip-container ${full ? 'full-size' : 'compact-size'}`}
  style={`aspect-ratio: ${aspectRatio}; border-radius: 1rem; overflow: hidden; position: relative; ${
    full 
      ? 'width: 100%; margin: 1rem 0;' 
      : 'width: 80%; margin: 1.5rem auto; max-width: 640px;'
  }`}
  data-image-id={imageId}
  data-loading-state="loading"
>
  <!-- LQIP placeholder (서버사이드에서 완전히 렌더링, SSG에 포함) -->
  <div
    class={`lqip-placeholder ${renderInfo.className || ''}`}
    style={`${lqipStyle}; position: absolute; top: 0; left: 0; width: 100%; height: 100%; transition: opacity 0.6s cubic-bezier(0.4, 0.0, 0.2, 1); z-index: 1; opacity: 1;`}
    data-has-lqip={hasData}
  ></div>

  {useOptimizedImages && (
    <img
      id={imageId}
      src={fallbackImageSrc}
      srcset={optimizedImages.map(img => `${img.src} ${img.width}w`).join(', ')}
      sizes={sizes}
      alt={alt}
      width={width}
      height={calculatedHeight}
      loading={isLikelyFirstImage ? "eager" : "lazy"}
      decoding="async"
      style="width: 100%; height: auto; position: relative; z-index: 2; opacity: 0; transition: opacity 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);"
      {...(isLikelyFirstImage ? { fetchpriority: "high" } : {})}
      onload="this.style.opacity='1'; this.closest('.lqip-container').querySelector('.lqip-placeholder').style.opacity='0'; this.closest('.lqip-container').setAttribute('data-loading-state', 'loaded');"
      onerror="this.closest('.lqip-container').setAttribute('data-loading-state', 'error');"
    />
  )}

  {!useOptimizedImages && (
    <img
      id={imageId}
      src={imageSrc}
      alt={alt}
      loading={isLikelyFirstImage ? "eager" : "lazy"}
      style="width: 100%; height: auto; margin: 0; padding: 0; border: 0; display: block; position: relative; z-index: 2; opacity: 0; transition: opacity 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);"
      {...(isLikelyFirstImage ? { fetchpriority: "high" } : {})}
      onload="this.style.opacity='1'; this.closest('.lqip-container').querySelector('.lqip-placeholder').style.opacity='0'; this.closest('.lqip-container').setAttribute('data-loading-state', 'loaded');"
      onerror="this.closest('.lqip-container').setAttribute('data-loading-state', 'error');"
    />
  )}

</div>

<!-- TBT 최적화: 클라이언트사이드 JavaScript 완전 제거, 인라인 이벤트 핸들러만 사용 -->

<style>
  /* LQIP 관련 스타일 - CLS 최적화 */
  .lqip-container {
    position: relative;
    overflow: hidden;
    /* CLS 방지: 정확한 공간 사전 예약 */
    contain: layout style paint;
    /* GPU 가속 활성화 */
    transform: translateZ(0);
    will-change: auto;
  }
  
  /* 컴팩트 크기 (80%) - 기본값 */
  .compact-size {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .compact-size:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }
  
  /* 풀사이즈 (100%) */
  .full-size {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }
  
  /* 반응형 조정 */
  @media (max-width: 768px) {
    .compact-size {
      width: 90% !important;
      max-width: none !important;
    }
    
    .full-size {
      margin: 1rem 0 !important;
    }
  }
  
  @media (max-width: 480px) {
    .compact-size {
      width: 95% !important;
      margin: 1rem auto !important;
    }
  }
  
  .lqip-placeholder {
    /* 부드러운 그라데이션 렌더링 */
    image-rendering: auto;
    /* 부드러운 fade out 효과 */
    transition: opacity 0.6s cubic-bezier(0.4, 0.0, 0.2, 1);
    opacity: 1;
  }
  
  .lqip-four-pixel {
    /* radial gradient 방식 특별 스타일 */
    filter: blur(0.5px);
    background-blend-mode: multiply;
  }
  
  .lqip-five-color {
    /* 5개 색상 방식 특별 스타일 */
    filter: blur(1px);
    background-blend-mode: soft-light;
    mix-blend-mode: multiply;
  }
  
  .lqip-fallback {
    /* 폴백 그라데이션 스타일 */
    opacity: 0.8;
  }
  
  /* 이미지 fade in 효과 - 성능 최적화 */
  .lqip-container img {
    transition: opacity 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);
    opacity: 0;
    /* CLS 방지: 이미지 크기 고정 */
    width: 100%;
    height: auto;
    display: block;
    /* 최적화된 이미지 렌더링 */
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
    /* 디코딩 최적화 */
    content-visibility: auto;
  }
  
  .lqip-container img[data-loaded="true"] {
    opacity: 1;
  }
  
  /* Intersection Observer 최적화 */
  .lqip-container:not([data-loading-state="loaded"]) img {
    /* 로딩 중일 때 GPU 최적화 비활성화 */
    will-change: opacity;
  }
  
  .lqip-container[data-loading-state="loaded"] img {
    /* 로딩 완료 후 GPU 최적화 정리 */
    will-change: auto;
  }
  
  /* 로딩 상태별 스타일 */
  .lqip-container[data-loading-state="loading"] .lqip-placeholder {
    opacity: 1;
  }
  
  .lqip-container[data-loading-state="loaded"] .lqip-placeholder {
    opacity: 0;
  }
  
  .lqip-container[data-loading-state="error"] .lqip-placeholder {
    opacity: 1;
    /* 에러 시 약간 다른 스타일 */
    filter: brightness(0.9) saturate(0.8);
  }
  
  /* 부드러운 교차 페이드 효과 */
  @media (prefers-reduced-motion: no-preference) {
    .lqip-placeholder {
      transition: opacity 0.8s cubic-bezier(0.25, 0.1, 0.25, 1);
    }
    
    .lqip-container img {
      transition: opacity 0.6s cubic-bezier(0.25, 0.1, 0.25, 1);
    }
  }
  
  /* 애니메이션 축소 모드 지원 */
  @media (prefers-reduced-motion: reduce) {
    .lqip-placeholder,
    .lqip-container img {
      transition: opacity 0.2s ease;
    }
  }
</style>
