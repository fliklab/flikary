---
import { getImage } from 'astro:assets';
import { getLQIPInfo } from '../utils/lqip/astro-lqip';

export interface Props {
  src: string | { src: string; [key: string]: unknown };
  alt: string;
  slug?: string;
  width?: number;
  height?: number;
  widths?: number[];
  sizes?: string;
  quality?: number;
  format?: 'webp' | 'avif' | 'png' | 'jpg';
  full?: boolean; // 풀사이즈 표시 여부
}

const { 
  src, 
  alt, 
  width = 800, 
  height,
  quality = 80,
  format = 'webp',
  full = false // 기본값은 80% 크기
} = Astro.props;

// 고유한 이미지 ID 생성
const imageId = `img-${Math.random().toString(36).substr(2, 9)}`;

// URL에서 slug 추출
const urlPath = Astro.url.pathname;
const slugMatch = urlPath.match(/\/blog\/([^/]+)/);
const detectedSlug = slugMatch ? slugMatch[1] : undefined;
const finalSlug = Astro.props.slug || detectedSlug;

// src가 객체인지 문자열인지 확인하고 적절한 값 추출
const imageSrc = typeof src === "object" ? src.src : src;

// 블로그 포스트의 첫 번째 이미지 판단 (간단한 휴리스틱)
const isBlogPost = urlPath.includes('/blog/') && !urlPath.endsWith('/blog/');
const isLikelyFirstImage = isBlogPost && (
  imageSrc.startsWith('./') || 
  imageSrc.includes('@assets/images/') ||
  imageSrc.includes('assets/images/')
);

// 기기별 최적화된 반응형 이미지 설정 (더 세밀한 크기 조정)
const responsiveConfig = full ? {
  // 풀사이즈 (100%) - 큰 이미지들
  widths: [480, 768, 1024, 1280, 1536],
  sizes: "(max-width: 480px) 100vw, (max-width: 768px) 100vw, (max-width: 1024px) 1024px, 1280px"
} : {
  // 컴팩트 크기 (80%) - 작은 이미지들  
  widths: [320, 480, 640, 768, 960],
  sizes: "(max-width: 480px) 95vw, (max-width: 768px) 80vw, (max-width: 1024px) 640px, 640px"
};

const { widths, sizes } = responsiveConfig;

// getImage()를 사용하여 빌드타임에 srcset 생성 (SSG 완전 최적화)
let optimizedImages: any[] = [];
let fallbackImage: any = null;
let useOptimizedImages = false;

try {
  // 모든 이미지들을 동적으로 import
  const images = import.meta.glob([
    '/src/content/blog/**/*.{jpg,jpeg,png,webp,gif,svg}',
    '/src/assets/images/**/*.{jpg,jpeg,png,webp,gif,svg}'
  ], { eager: false });

  // 이미지 import 시도
  let imageImport: any = null;
  
  if (finalSlug && imageSrc && !imageSrc.startsWith('http') && !imageSrc.startsWith('/_astro/')) {
    // 다양한 경로 패턴으로 이미지 찾기 시도
    const possiblePaths = [
      `/src/content/blog/${finalSlug}/${imageSrc}`,
      `/src/content/blog/${finalSlug}/${imageSrc.replace('./', '')}`,
      `/src/assets/images/${finalSlug}/${imageSrc}`,
      `/src/assets/images/${imageSrc}`,
    ];

    for (const pathToTry of possiblePaths) {
      if (images[pathToTry]) {
        imageImport = await images[pathToTry]();
        console.log(`✅ 이미지 import 성공: ${pathToTry}`);
        break;
      }
    }
  }

  if (imageImport) {
    // 각 크기별로 최적화된 이미지 생성 (빌드타임 SSG 최적화)
    optimizedImages = await Promise.all(
      widths.map(async (w) => {
        const optimized = await getImage({
          src: imageImport.default,
          width: w,
          height: height ? Math.round((height * w) / width) : undefined,
          format,
          quality
        });
        return {
          src: optimized.src,
          width: w
        };
      })
    );

    // 폴백 이미지 (메인 크기)
    fallbackImage = await getImage({
      src: imageImport.default,
      width,
      height,
      format,
      quality
    });

    useOptimizedImages = true;
    console.log(`🎯 SSG 최적화 이미지 생성 완료: ${optimizedImages.length}개 크기`);
  }
} catch (error) {
  console.warn('⚠️ 이미지 최적화 실패, 원본 이미지 사용:', error);
}

// 새로운 LQIP 시스템 사용 - 서버사이드에서 처리 (SSG에 완전히 포함)
const lqipInfo = await getLQIPInfo(imageSrc, finalSlug);
const { renderInfo, aspectRatio, hasData } = lqipInfo;

// 이미지 높이 계산 (aspectRatio가 있는 경우)
let calculatedHeight = height;
if (!height && aspectRatio !== 'auto') {
  const ratio = parseFloat(aspectRatio);
  if (!isNaN(ratio)) {
    calculatedHeight = Math.round(width / ratio);
  }
}

// LQIP 스타일 처리 - 서버사이드에서 완전히 렌더링 (SSG에 포함)
const lqipStyle = typeof renderInfo.style === 'string' 
  ? renderInfo.style 
  : Object.entries(renderInfo.style).map(([key, value]) => `${key}: ${value}`).join('; ');

// LCP 이미지에 대한 preload 힌트 생성 (첫 번째 이미지일 가능성이 높은 경우만)
const shouldPreload = useOptimizedImages && isLikelyFirstImage;
const preloadHref = shouldPreload && fallbackImage ? fallbackImage.src : null;
---

<!-- LCP 이미지에 대한 preload 힌트 (SSG에 포함) -->
{shouldPreload && preloadHref && (
  <link rel="preload" as="image" href={preloadHref} />
)}

<div
  class={`lqip-container ${full ? 'full-size' : 'compact-size'}`}
  style={`aspect-ratio: ${aspectRatio}; border-radius: 1rem; overflow: hidden; position: relative; ${
    full 
      ? 'width: 100%; margin: 1rem 0;' 
      : 'width: 80%; margin: 1.5rem auto; max-width: 640px;'
  }`}
  data-image-id={imageId}
  data-loading-state="loading"
>
  <!-- LQIP placeholder (서버사이드에서 완전히 렌더링, SSG에 포함) -->
  <div
    class={`lqip-placeholder ${renderInfo.className || ''}`}
    style={`${lqipStyle}; position: absolute; top: 0; left: 0; width: 100%; height: 100%; transition: opacity 0.6s cubic-bezier(0.4, 0.0, 0.2, 1); z-index: 1; opacity: 1;`}
    data-has-lqip={hasData}
  ></div>

  {useOptimizedImages && fallbackImage && (
    <!-- 완전 최적화된 반응형 이미지 (빌드타임 srcset 생성, SSG에 포함) -->
    <img
      id={imageId}
      src={fallbackImage.src}
      srcset={optimizedImages.map(img => `${img.src} ${img.width}w`).join(', ')}
      sizes={sizes}
      alt={alt}
      width={fallbackImage.width}
      height={fallbackImage.height}
      loading={isLikelyFirstImage ? "eager" : "lazy"}
      decoding="async"
      style="width: 100%; height: auto; position: relative; z-index: 2; opacity: 0; transition: opacity 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);"
      {...(isLikelyFirstImage ? { fetchpriority: "high" } : {})}
      onload="this.style.opacity='1'; this.closest('.lqip-container').querySelector('.lqip-placeholder').style.opacity='0'; this.closest('.lqip-container').setAttribute('data-loading-state', 'loaded');"
      onerror="this.closest('.lqip-container').setAttribute('data-loading-state', 'error');"
    />
  )}

  {(!useOptimizedImages || !fallbackImage) && (
    <!-- 폴백: 일반 이미지 (최적화되지 않음) -->
    <img
      id={imageId}
      src={imageSrc}
      alt={alt}
      loading={isLikelyFirstImage ? "eager" : "lazy"}
      style="width: 100%; height: auto; margin: 0; padding: 0; border: 0; display: block; position: relative; z-index: 2; opacity: 0; transition: opacity 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);"
      {...(isLikelyFirstImage ? { fetchpriority: "high" } : {})}
      onload="this.style.opacity='1'; this.closest('.lqip-container').querySelector('.lqip-placeholder').style.opacity='0'; this.closest('.lqip-container').setAttribute('data-loading-state', 'loaded');"
      onerror="this.closest('.lqip-container').setAttribute('data-loading-state', 'error');"
    />
  )}

</div>

<!-- TBT 최적화: 클라이언트사이드 JavaScript 완전 제거, 인라인 이벤트 핸들러만 사용 -->

<style>
  /* LQIP 관련 스타일 */
  .lqip-container {
    position: relative;
    overflow: hidden;
  }
  
  /* 컴팩트 크기 (80%) - 기본값 */
  .compact-size {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .compact-size:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }
  
  /* 풀사이즈 (100%) */
  .full-size {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }
  
  /* 반응형 조정 */
  @media (max-width: 768px) {
    .compact-size {
      width: 90% !important;
      max-width: none !important;
    }
    
    .full-size {
      margin: 1rem 0 !important;
    }
  }
  
  @media (max-width: 480px) {
    .compact-size {
      width: 95% !important;
      margin: 1rem auto !important;
    }
  }
  
  .lqip-placeholder {
    /* 부드러운 그라데이션 렌더링 */
    image-rendering: auto;
    /* 부드러운 fade out 효과 */
    transition: opacity 0.6s cubic-bezier(0.4, 0.0, 0.2, 1);
    opacity: 1;
  }
  
  .lqip-four-pixel {
    /* radial gradient 방식 특별 스타일 */
    filter: blur(0.5px);
    background-blend-mode: multiply;
  }
  
  .lqip-five-color {
    /* 5개 색상 방식 특별 스타일 */
    filter: blur(1px);
    background-blend-mode: soft-light;
    mix-blend-mode: multiply;
  }
  
  .lqip-fallback {
    /* 폴백 그라데이션 스타일 */
    opacity: 0.8;
  }
  
  /* 이미지 fade in 효과 */
  .lqip-container img {
    transition: opacity 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);
    opacity: 0;
  }
  
  .lqip-container img[data-loaded="true"] {
    opacity: 1;
  }
  
  /* 로딩 상태별 스타일 */
  .lqip-container[data-loading-state="loading"] .lqip-placeholder {
    opacity: 1;
  }
  
  .lqip-container[data-loading-state="loaded"] .lqip-placeholder {
    opacity: 0;
  }
  
  .lqip-container[data-loading-state="error"] .lqip-placeholder {
    opacity: 1;
    /* 에러 시 약간 다른 스타일 */
    filter: brightness(0.9) saturate(0.8);
  }
  
  /* 부드러운 교차 페이드 효과 */
  @media (prefers-reduced-motion: no-preference) {
    .lqip-placeholder {
      transition: opacity 0.8s cubic-bezier(0.25, 0.1, 0.25, 1);
    }
    
    .lqip-container img {
      transition: opacity 0.6s cubic-bezier(0.25, 0.1, 0.25, 1);
    }
  }
  
  /* 애니메이션 축소 모드 지원 */
  @media (prefers-reduced-motion: reduce) {
    .lqip-placeholder,
    .lqip-container img {
      transition: opacity 0.2s ease;
    }
  }
</style>
