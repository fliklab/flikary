---
export interface Props {
  activeNav?: "blog" | "archives" | "tags" | "resume"| "about" | "search";
}

const { activeNav } = Astro.props;
---

<header id="main-header" class="floating-header">
  <!-- SVG Filters for Lens Effect -->
  <svg width="0" height="0" style="position: absolute;">
    <defs>
      <filter id="lensDistortion" x="-20%" y="-20%" width="140%" height="140%">
        <!-- Create noise for displacement -->
        <feTurbulence 
          baseFrequency="0.015 0.012" 
          numOctaves="4" 
          type="fractalNoise" 
          result="noise"/>
        
        <!-- Create displacement map for lens effect -->
        <feDisplacementMap 
          in="SourceGraphic" 
          in2="noise" 
          scale="2.5" 
          xChannelSelector="R" 
          yChannelSelector="G" 
          result="displaced"/>
        
        <!-- Gaussian blur for lens focus -->
        <feGaussianBlur 
          in="displaced" 
          stdDeviation="0.8" 
          result="blurred"/>
        
        <!-- Combine effects -->
        <feComposite 
          in="blurred" 
          in2="SourceGraphic" 
          operator="screen"/>
      </filter>

      <!-- Strong lens distortion for backdrop -->
      <filter id="backdropLens" x="-20%" y="-20%" width="140%" height="140%">
        <!-- Create radial distortion pattern -->
        <feTurbulence 
          baseFrequency="0.008 0.006" 
          numOctaves="3" 
          type="fractalNoise" 
          result="noise"/>
        
        <!-- Create stronger displacement for lens effect -->
        <feDisplacementMap 
          in="BackgroundImage" 
          in2="noise" 
          scale="3.5" 
          xChannelSelector="R" 
          yChannelSelector="G" 
          result="distorted"/>
          
        <!-- Add magnification effect -->
        <feGaussianBlur 
          in="distorted" 
          stdDeviation="0.3" 
          result="magnified"/>
          
        <!-- Blend for final lens effect -->
        <feComposite 
          in="magnified" 
          in2="BackgroundImage" 
          operator="multiply" 
          result="lensed"/>
      </filter>

      <!-- Convex lens simulation -->
      <filter id="convexLens" x="-30%" y="-30%" width="160%" height="160%">
        <!-- Create radial gradient for lens curvature -->
        <feGaussianBlur 
          in="BackgroundImage" 
          stdDeviation="1.2" 
          result="blurred"/>
        
        <!-- Create displacement for magnification -->
        <feTurbulence 
          baseFrequency="0.002 0.002" 
          numOctaves="1" 
          type="fractalNoise" 
          result="lensNoise"/>
        
        <feDisplacementMap 
          in="blurred" 
          in2="lensNoise" 
          scale="4.0" 
          xChannelSelector="R" 
          yChannelSelector="G"/>
      </filter>
    </defs>
  </svg>

  <!-- Floating Navigation Container -->
  <nav id="floating-nav" class="floating-nav compact">
    <!-- Compact State Icons -->
    <div class="compact-icons">
      <a href="/" class="nav-icon" title="Home">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
          <polyline points="9,22 9,12 15,12 15,22"/>
        </svg>
      </a>
      
      <a href="/about/" class="nav-icon" title="About">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
          <circle cx="12" cy="7" r="4"/>
        </svg>
      </a>
      
      <a href="/blog/" class="nav-icon" title="Blog">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/>
          <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/>
        </svg>
      </a>
      
      <a href="/resume/" class="nav-icon" title="Resume">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/>
          <rect x="8" y="2" width="8" height="4" rx="1" ry="1"/>
        </svg>
      </a>

      <a href="/search/" class="nav-icon" title="Search">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="11" cy="11" r="8"/>
          <path d="M21 21l-4.35-4.35"/>
        </svg>
      </a>
    </div>

    <!-- Expanded State Menu -->
    <div class="expanded-menu">
      <a href="/" class={`nav-item ${activeNav === "blog" ? "active" : ""}`}>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
          <polyline points="9,22 9,12 15,12 15,22"/>
        </svg>
        <span>Home</span>
      </a>

      <a href="/about/" class={`nav-item ${activeNav === "about" ? "active" : ""}`}>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
          <circle cx="12" cy="7" r="4"/>
        </svg>
        <span>About</span>
      </a>

      <a href="/blog/" class={`nav-item ${activeNav === "blog" ? "active" : ""}`}>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/>
          <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/>
        </svg>
        <span>Blog</span>
      </a>

      <a href="/resume/" class={`nav-item ${activeNav === "resume" ? "active" : ""}`}>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/>
          <rect x="8" y="2" width="8" height="4" rx="1" ry="1"/>
        </svg>
        <span>Resume</span>
      </a>

      <a href="/search/" class={`nav-item ${activeNav === "search" ? "active" : ""}`}>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="11" cy="11" r="8"/>
          <path d="M21 21l-4.35-4.35"/>
        </svg>
        <span>Search</span>
      </a>
    </div>


  </nav>
</header>

<style>
  /* Design System Variables */
  :root {
    /* Timing */
    --nav-transition-duration: 0.2s;
    --nav-transition-timing: ease-in-out;
    --nav-transition-delay: 0.1s;

    /* Navigation Sizes */
    --nav-compact-width: 260px;
    --nav-compact-height: 48px;
    --nav-expanded-width: 540px;
    --nav-expanded-height: 56px;

    /* Mobile Navigation Sizes */
    --nav-compact-width-mobile: 220px;
    --nav-compact-height-mobile: 44px;
    --nav-expanded-width-mobile: 380px;
    --nav-expanded-height-mobile: 52px;

    /* Spacing */
    --nav-top-position: 4px; /* top-1 = 4px */
    --nav-border-radius: 50px;
    --nav-gap-desktop: 32px;
    --nav-gap-mobile: 24px;
    --nav-padding-compact: 8px 16px;
    --nav-padding-compact-mobile: 6px 12px;
    --nav-padding-item: 12px 8px; /* px-3 py-2 */
    --nav-padding-item-mobile: 6px 8px;

    /* Icon Sizes */
    --nav-icon-size: 32px; /* w-8 h-8 */
    --nav-icon-size-mobile: 28px; /* w-7 h-7 */
    --nav-icon-svg-size: 16px; /* w-4 h-4 */
    --nav-icon-svg-size-mobile: 14px; /* w-3.5 h-3.5 */

    /* Typography */
    --nav-font-size: 15px;
    --nav-font-size-mobile: 13px;
    --nav-font-weight: 500;

    /* Body Padding */
    --body-padding-top: 70px;
    --body-padding-top-mobile: 65px;

    /* Glassmorphism Effect */
    --nav-background-opacity: 0.5; /* 더 투명하게 */
    --nav-backdrop-blur: 28px; /* 더 강한 블러 */
    --nav-border-opacity: 0.92;
    --nav-hover-opacity: 0.2;
    --nav-hover-opacity-dark: 0.1;

    /* Lens Distortion Effect */
    --lens-distortion-scale: 2.0;
    --lens-blur-strength: 0.8;
    --lens-noise-frequency: 0.015;
  }

  /* Floating Header Styles */
  .floating-header {
    @apply fixed top-0 left-0 right-0 z-50 pointer-events-none;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    view-transition-name: floating-header;
  }

  .floating-header.header-hidden {
    transform: translateY(-100%);
  }

  .floating-header.header-visible {
    transform: translateY(0);
  }

  /* SVG Lens Distortion Filter */
  .lens-distortion {
    filter: url(#lensDistortion);
  }

  /* Floating Navigation */
  .floating-nav {
    @apply fixed left-1/2 pointer-events-auto;
    top: var(--nav-top-position);
    transform: translateX(-50%);
    background: rgba(255, 255, 255, var(--nav-background-opacity));
    backdrop-filter: blur(var(--nav-backdrop-blur)) 
                     brightness(1.15) 
                     contrast(1.08)
                     url(#convexLens);
    border-radius: var(--nav-border-radius);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.06), 
                0 4px 16px rgba(0, 0, 0, 0.03),
                0 2px 8px rgba(0, 0, 0, 0.02),
                inset 0 1px 0 rgba(255, 255, 255, 0.4),
                inset 0 -1px 0 rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, var(--nav-border-opacity));
    transition: width var(--nav-transition-duration) var(--nav-transition-timing), 
                height var(--nav-transition-duration) var(--nav-transition-timing), 
                border-radius var(--nav-transition-duration) var(--nav-transition-timing), 
                top var(--nav-transition-duration) var(--nav-transition-timing), 
                transform var(--nav-transition-duration) var(--nav-transition-timing);
    overflow: hidden;
    position: relative;
  }

  /* Lens effect overlay */
  .floating-nav::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    background: radial-gradient(ellipse at center, 
                                rgba(255, 255, 255, 0.18) 0%, 
                                rgba(255, 255, 255, 0.12) 30%, 
                                rgba(255, 255, 255, 0.06) 60%, 
                                rgba(255, 255, 255, 0.02) 80%, 
                                transparent 100%);
    pointer-events: none;
    filter: url(#lensDistortion);
  }

  /* Additional lens highlight effect */
  .floating-nav::after {
    content: '';
    position: absolute;
    inset: 2px;
    border-radius: inherit;
    background: radial-gradient(ellipse 40% 30% at 50% 30%, 
                                rgba(255, 255, 255, 0.25) 0%, 
                                rgba(255, 255, 255, 0.1) 40%, 
                                transparent 70%);
    pointer-events: none;
    opacity: 0.6;
  }

  /* Dark mode lens effects */
  :global(.dark) .floating-nav::before {
    background: radial-gradient(ellipse at center, 
                                rgba(255, 255, 255, 0.08) 0%, 
                                rgba(255, 255, 255, 0.04) 40%, 
                                rgba(255, 255, 255, 0.02) 70%, 
                                transparent 100%);
  }

  :global(.dark) .floating-nav::after {
    background: radial-gradient(ellipse 40% 30% at 50% 30%, 
                                rgba(255, 255, 255, 0.12) 0%, 
                                rgba(255, 255, 255, 0.06) 40%, 
                                transparent 70%);
  }

  /* Dark mode styles */
  :global(.dark) .floating-nav {
    background: rgba(17, 24, 39, var(--nav-background-opacity));
    border: 1px solid rgba(75, 85, 99, var(--nav-border-opacity));
    backdrop-filter: blur(var(--nav-backdrop-blur)) 
                     brightness(1.25) 
                     contrast(1.12)
                     url(#convexLens);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4), 
                0 4px 16px rgba(0, 0, 0, 0.2),
                0 2px 8px rgba(0, 0, 0, 0.15),
                inset 0 1px 0 rgba(255, 255, 255, 0.12),
                inset 0 -1px 0 rgba(255, 255, 255, 0.05);
  }

  /* Compact State */
  .floating-nav.compact {
    width: var(--nav-compact-width);
    height: var(--nav-compact-height);
    padding: 0;
  }

  .compact-icons {
    @apply flex items-center justify-evenly w-full h-full absolute inset-0;
    opacity: 1;
    transition: opacity var(--nav-transition-duration) var(--nav-transition-timing);
    padding: var(--nav-padding-compact);
    z-index: 10;
  }

  .floating-nav.expanded .compact-icons {
    opacity: 0;
    pointer-events: none;
  }

  /* Expanded State */
  .floating-nav.expanded {
    width: var(--nav-expanded-width);
    height: var(--nav-expanded-height);
    padding: 0;
  }



  .expanded-menu {
    @apply flex items-center w-full h-full absolute inset-0;
    opacity: 0;
    pointer-events: none;
    transition: opacity var(--nav-transition-duration) var(--nav-transition-timing);
    justify-content: center;
    gap: var(--nav-gap-desktop);
    z-index: 10;
  }

  .floating-nav.expanded .expanded-menu {
    opacity: 1;
    pointer-events: auto;
  }

  /* 메뉴 아이템 텍스트 애니메이션 */
  .expanded-menu .nav-item span {
    opacity: 0;
    transition: opacity var(--nav-transition-duration) var(--nav-transition-timing) var(--nav-transition-delay);
  }

  .floating-nav.expanded .expanded-menu .nav-item span {
    opacity: 1;
  }



  /* Navigation Icons and Items */
  .nav-icon {
    @apply flex items-center justify-center rounded-full;
    @apply text-skin-base hover:text-skin-accent;
    width: var(--nav-icon-size);
    height: var(--nav-icon-size);
    transition: color var(--nav-transition-duration) var(--nav-transition-timing), 
                background-color var(--nav-transition-duration) var(--nav-transition-timing),
                backdrop-filter var(--nav-transition-duration) var(--nav-transition-timing);
    cursor: pointer;
    border: none;
    background: none;
  }

  .nav-icon:hover {
    background: rgba(255, 255, 255, var(--nav-hover-opacity));
    backdrop-filter: blur(8px);
  }

  :global(.dark) .nav-icon:hover {
    background: rgba(255, 255, 255, var(--nav-hover-opacity-dark));
  }

  .nav-icon svg {
    width: var(--nav-icon-svg-size);
    height: var(--nav-icon-svg-size);
    fill: none;
    stroke: currentColor;
    stroke-width: 2;
  }

  .nav-item {
    @apply flex items-center space-x-2 rounded-full;
    @apply text-skin-base hover:text-skin-accent;
    padding: var(--nav-padding-item);
    transition: color var(--nav-transition-duration) var(--nav-transition-timing), 
                background-color var(--nav-transition-duration) var(--nav-transition-timing),
                backdrop-filter var(--nav-transition-duration) var(--nav-transition-timing);
    text-decoration: none;
    font-size: var(--nav-font-size);
    font-weight: var(--nav-font-weight);
    white-space: nowrap;
    position: relative;
  }

  .nav-item:hover {
    background: rgba(255, 255, 255, var(--nav-hover-opacity));
    backdrop-filter: blur(8px);
  }

  :global(.dark) .nav-item:hover {
    background: rgba(255, 255, 255, var(--nav-hover-opacity-dark));
  }

  /* 아이콘 위치 고정 */
  .nav-item svg {
    position: relative;
    z-index: 1;
  }

  .nav-item svg {
    @apply flex-shrink-0;
    width: var(--nav-icon-svg-size);
    height: var(--nav-icon-svg-size);
    fill: none;
    stroke: currentColor;
    stroke-width: 2;
  }

  .nav-item.active {
    @apply text-skin-accent;
    background: rgba(var(--color-accent), 0.15);
    backdrop-filter: blur(8px);
  }

  :global(.dark) .nav-item.active {
    background: rgba(var(--color-accent), 0.2);
  }



  /* Top padding to prevent content from being hidden behind floating nav */
  :global(body) {
    padding-top: var(--body-padding-top);
  }

  /* Mobile responsive */
  @media (max-width: 640px) {
    :global(body) {
      padding-top: var(--body-padding-top-mobile);
    }

    .floating-nav.compact {
      width: var(--nav-compact-width-mobile);
      height: var(--nav-compact-height-mobile);
      padding: 0;
    }

    .floating-nav.expanded {
      width: var(--nav-expanded-width-mobile);
      height: var(--nav-expanded-height-mobile);
      padding: 0;
    }

    .compact-icons {
      padding: var(--nav-padding-compact-mobile);
    }

    .expanded-menu {
      gap: var(--nav-gap-mobile);
    }

    .nav-icon {
      width: var(--nav-icon-size-mobile);
      height: var(--nav-icon-size-mobile);
    }

    .nav-icon svg {
      width: var(--nav-icon-svg-size-mobile);
      height: var(--nav-icon-svg-size-mobile);
    }

    .nav-item {
      padding: var(--nav-padding-item-mobile);
    }

    .nav-item span {
      font-size: var(--nav-font-size-mobile);
    }

    .nav-item svg {
      width: var(--nav-icon-svg-size-mobile);
      height: var(--nav-icon-svg-size-mobile);
    }
  }
</style>

<script>
  function initFloatingNavigation() {
    const header = document.getElementById("main-header");
    const nav = document.getElementById("floating-nav");

    if (!header || !nav) return;

    let lastScrollY = window.scrollY;
    let ticking = false;

    // Navigation state management
    function showExpandedNav() {
      nav!.classList.remove("compact");
      nav!.classList.add("expanded");
    }

    function showCompactNav() {
      nav!.classList.remove("expanded");
      nav!.classList.add("compact");
    }

    // Scroll handling
    function updateNavigation() {
      const currentScrollY = window.scrollY;

      // 스크롤 방향 감지
      const isScrollingDown = currentScrollY > lastScrollY;

      if (isScrollingDown) {
        // 스크롤 다운: 무조건 mini (compact)
        showCompactNav();
      } else {
        // 스크롤 업: big (expanded)
        showExpandedNav();
      }

      lastScrollY = currentScrollY;
      ticking = false;
    }

    function handleScroll() {
      if (!ticking) {
        requestAnimationFrame(updateNavigation);
        ticking = true;
      }
    }

      // 상태 저장/복원 함수
    function saveNavState() {
      const isExpanded = nav!.classList.contains("expanded");
      const scrollY = window.scrollY;
      sessionStorage.setItem("navState", JSON.stringify({ isExpanded, scrollY }));
    }

    function restoreNavState() {
      const savedState = sessionStorage.getItem("navState");
      if (savedState) {
        const { isExpanded } = JSON.parse(savedState);
        // 네비게이션 상태 복원
        if (isExpanded) {
          showExpandedNav();
        } else {
          showCompactNav();
        }
        // 상태 복원 후 세션 정리
        sessionStorage.removeItem("navState");
      } else {
        // 초기 상태 설정
        if (window.scrollY === 0) {
          showExpandedNav();
        } else {
          showCompactNav();
        }
      }
    }

    // 초기 상태 설정 또는 복원
    restoreNavState();

    // 이벤트 리스너 추가
    window.addEventListener("scroll", handleScroll, { passive: true });
    
    // 페이지 전환 전 상태 저장
    document.addEventListener("astro:before-swap", saveNavState);

    return () => {
      window.removeEventListener("scroll", handleScroll);
      document.removeEventListener("astro:before-swap", saveNavState);
    };
  }

  // 초기 실행
  initFloatingNavigation();

  // Astro view transitions에 대한 대응
  document.addEventListener("astro:after-swap", initFloatingNavigation);
</script>
