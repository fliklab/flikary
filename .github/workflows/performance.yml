name: Flikary.dev Performance Monitoring

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "public/**"
      - "astro.config.mjs"
      - "package.json"
      - "package-lock.json"
      - "performance-config.json"
      - "tailwind.config.js"
      - "tsconfig.json"

  # 24ÏãúÍ∞Ñ ÎèôÏïà Ïã§Ìñâ ÏïàÎêú Í≤ΩÏö∞ Ïò§Ï†Ñ 4ÏãúÏóê Ïã§Ìñâ (KST Í∏∞Ï§Ä)
  schedule:
    - cron: "0 19 * * *" # UTC 19:00 = KST 04:00

  workflow_dispatch:
    inputs:
      test_config:
        description: "ÌÖåÏä§Ìä∏ Íµ¨ÏÑ±"
        required: true
        default: "quick"
        type: choice
        options:
          - "quick"
          - "comprehensive"
          - "blog_focus"
      environment:
        description: "ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω"
        required: true
        default: "production"
        type: choice
        options:
          - "local"
          - "staging"
          - "production"
      force_run:
        description: "Í∞ïÏ†ú Ïã§Ìñâ (ÌååÏùº Î≥ÄÍ≤Ω Ïó¨Î∂Ä Î¨¥Ïãú)"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "18"

jobs:
  check-execution-needed:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      config_name: ${{ steps.config.outputs.config_name }}
      environment: ${{ steps.config.outputs.environment }}
      test_urls: ${{ steps.urls.outputs.test_urls }}
      page_names: ${{ steps.urls.outputs.page_names }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if performance test should run
        id: check
        run: |
          echo "üîç Checking execution conditions..."

          # ÏàòÎèô Ïã§ÌñâÏù¥Í±∞ÎÇò Í∞ïÏ†ú Ïã§ÌñâÏù∏ Í≤ΩÏö∞
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ inputs.force_run }}" = "true" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Manual execution or force run"
            exit 0
          fi

          # Ïä§ÏºÄÏ§Ñ Ïã§ÌñâÏù∏ Í≤ΩÏö∞ - 24ÏãúÍ∞Ñ ÎÇ¥ Ïã§Ìñâ Ïù¥Î†• ÌôïÏù∏
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "üìÖ Scheduled execution - checking recent workflow runs"
            
            # ÏµúÍ∑º 24ÏãúÍ∞Ñ ÎÇ¥ ÏÑ±Í≥µÌïú workflow run ÌôïÏù∏
            RECENT_RUNS=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "${{ github.api_url }}/repos/${{ github.repository }}/actions/workflows/performance.yml/runs?per_page=10" \
              | jq -r --arg since "$(date -u -d '24 hours ago' '+%Y-%m-%dT%H:%M:%SZ')" \
              '[.workflow_runs[] | select(.created_at > $since and .conclusion == "success")] | length')
            
            if [ "$RECENT_RUNS" -gt 0 ]; then
              echo "should_run=false" >> $GITHUB_OUTPUT
              echo "‚è≠Ô∏è Performance test already ran in the last 24 hours ($RECENT_RUNS successful runs)"
              exit 0
            else
              echo "should_run=true" >> $GITHUB_OUTPUT
              echo "üöÄ No successful runs in 24 hours - executing fallback test"
              exit 0
            fi
          fi

          # Push Ïù¥Î≤§Ìä∏Ïù∏ Í≤ΩÏö∞ - ÏÑ±Îä•Ïóê ÏòÅÌñ•ÏùÑ Ï£ºÎäî ÌååÏùº Î≥ÄÍ≤Ω ÌôïÏù∏
          echo "üìù Checking changed files for performance impact..."
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "üìù Changed files:"
          echo "$CHANGED_FILES"

          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "üöÄ Performance-impacting files detected"

      - name: Determine test configuration
        id: config
        run: |
          echo "üéØ Determining test configuration..."

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CONFIG_NAME="${{ inputs.test_config }}"
            ENVIRONMENT="${{ inputs.environment }}"
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            CONFIG_NAME="comprehensive"  # Ïä§ÏºÄÏ§Ñ Ïã§ÌñâÏãú Ï¢ÖÌï© ÌÖåÏä§Ìä∏
            ENVIRONMENT="production"
          else
            CONFIG_NAME="quick"          # ÏùºÎ∞ò pushÏãú Îπ†Î•∏ ÌÖåÏä§Ìä∏
            ENVIRONMENT="production"
          fi

          echo "config_name=$CONFIG_NAME" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

          echo "üìä Configuration: $CONFIG_NAME"
          echo "üåê Environment: $ENVIRONMENT"

      - name: Generate test URLs from config
        id: urls
        run: |
          echo "üìä Generating test URLs from performance-config.json..."

          CONFIG_NAME="${{ steps.config.outputs.config_name }}"
          ENVIRONMENT="${{ steps.config.outputs.environment }}"

          # performance-config.jsonÏù¥ ÏóÜÎäî Í≤ΩÏö∞ Í∏∞Î≥∏Í∞í
          if [ ! -f "performance-config.json" ]; then
            echo "‚ö†Ô∏è performance-config.json not found, using defaults"
            if [ "$ENVIRONMENT" = "local" ]; then
              BASE_URL="http://localhost:4321"
            elif [ "$ENVIRONMENT" = "staging" ]; then
              BASE_URL="https://preview.flikary.dev"
            else
              BASE_URL="https://flikary.dev"
            fi
            
            echo "test_urls=[\"$BASE_URL/\", \"$BASE_URL/resume\", \"$BASE_URL/archives\"]" >> $GITHUB_OUTPUT
            echo "page_names=[\"ÌôàÌéòÏù¥ÏßÄ\", \"Ïù¥Î†•ÏÑú\", \"ÏïÑÏπ¥Ïù¥Î∏å\"]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # ÏÑ§Ï†ï ÌååÏùºÏóêÏÑú Ï†ïÎ≥¥ Ï∂îÏ∂ú
          BASE_URL=$(cat performance-config.json | jq -r ".environments.$ENVIRONMENT.baseUrl")
          GROUPS=$(cat performance-config.json | jq -r ".testConfigs.$CONFIG_NAME.groups[]?" || echo "core")
          MAX_PAGES=$(cat performance-config.json | jq -r ".testConfigs.$CONFIG_NAME.maxPages // 5")

          echo "üåê Base URL: $BASE_URL"
          echo "üì¶ Groups: $GROUPS"
          echo "üìä Max pages: $MAX_PAGES"

          # URLÍ≥º ÌéòÏù¥ÏßÄ Ïù¥Î¶Ñ Î∞∞Ïó¥ ÏÉùÏÑ±
          URLS="["
          NAMES="["
          COUNT=0

          for GROUP in $GROUPS; do
            echo "üìã Processing group: $GROUP"
            
            # Í∑∏Î£πÏùò ÌéòÏù¥ÏßÄÎì§ Ï≤òÎ¶¨
            PATHS=$(cat performance-config.json | jq -r ".pageGroups.$GROUP.pages[]?.path" 2>/dev/null)
            PAGE_NAMES=$(cat performance-config.json | jq -r ".pageGroups.$GROUP.pages[]?.name" 2>/dev/null)
            
            while IFS= read -r PATH <&3 && IFS= read -r NAME <&4; do
              if [ -n "$PATH" ] && [ "$PATH" != "null" ] && [ "$COUNT" -lt "$MAX_PAGES" ]; then
                if [ "$COUNT" -gt 0 ]; then
                  URLS="$URLS,"
                  NAMES="$NAMES,"
                fi
                
                FULL_URL="$BASE_URL$PATH"
                URLS="$URLS\"$FULL_URL\""
                NAMES="$NAMES\"$NAME\""
                
                COUNT=$((COUNT + 1))
                echo "  ‚úÖ Added: $NAME ‚Üí $FULL_URL"
              fi
            done 3<<< "$PATHS" 4<<< "$PAGE_NAMES"
          done

          URLS="$URLS]"
          NAMES="$NAMES]"

          echo "üéØ Final URLs: $URLS"
          echo "üìù Final Names: $NAMES"

          echo "test_urls=$URLS" >> $GITHUB_OUTPUT
          echo "page_names=$NAMES" >> $GITHUB_OUTPUT

  performance-test:
    needs: check-execution-needed
    if: needs.check-execution-needed.outputs.should_run == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci

      - name: Build Astro site
        if: needs.check-execution-needed.outputs.environment == 'local'
        run: |
          echo "üî® Building Astro site..."
          npm run build

      - name: Start local preview server
        if: needs.check-execution-needed.outputs.environment == 'local'
        run: |
          echo "üöÄ Starting Astro preview server..."
          npm run preview &

          # ÏÑúÎ≤Ñ Ï§ÄÎπÑ ÎåÄÍ∏∞
          echo "‚è≥ Waiting for Astro server to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:4321 >/dev/null 2>&1; then
              echo "‚úÖ Astro server is ready after ${i} attempts"
              break
            else
              echo "‚è≥ Attempt $i: Server not ready yet..."
              sleep 2
            fi
            
            if [ $i -eq 30 ]; then
              echo "‚ùå Astro server failed to start after 60 seconds"
              exit 1
            fi
          done

      - name: Install Lighthouse
        run: |
          echo "üí° Installing Lighthouse..."
          npm install -g lighthouse

      - name: Run comprehensive performance tests
        run: |
          echo "üß™ Running performance tests..."

          URLS='${{ needs.check-execution-needed.outputs.test_urls }}'
          NAMES='${{ needs.check-execution-needed.outputs.page_names }}'
          CONFIG_NAME="${{ needs.check-execution-needed.outputs.config_name }}"
          ENVIRONMENT="${{ needs.check-execution-needed.outputs.environment }}"

          mkdir -p performance-data

          echo "üéØ Test configuration:"
          echo "  Config: $CONFIG_NAME"
          echo "  Environment: $ENVIRONMENT"
          echo "  URLs: $URLS"

          # Lighthouse ÌÖåÏä§Ìä∏ Ïã§Ìñâ
          URL_ARRAY=$(echo "$URLS" | jq -r '.[]')
          NAME_ARRAY=$(echo "$NAMES" | jq -r '.[]')

          INDEX=0
          while IFS= read -r URL <&3 && IFS= read -r NAME <&4; do
            echo "üîç Testing: $NAME ($URL)"
            FILENAME=$(echo "$NAME" | sed 's/[^a-zA-Z0-9Í∞Ä-Ìû£]/_/g')
            
            lighthouse "$URL" \
              --output=json \
              --output-path="performance-data/lighthouse-$FILENAME-$INDEX.json" \
              --chrome-flags="--no-sandbox --disable-dev-shm-usage" \
              --preset=desktop \
              --quiet
              
            echo "‚úÖ Completed: $NAME"
            INDEX=$((INDEX + 1))
          done 3<<< "$URL_ARRAY" 4<<< "$NAME_ARRAY"

      - name: Collect Web Vitals (Real User Data)
        run: |
          echo "üåç Collecting Web Vitals data..."

          # Web Vitals ÏàòÏßë Ïä§ÌÅ¨Î¶ΩÌä∏
          cat > collect-vitals.js << 'EOF'
          const https = require('https');

          async function fetchWebVitals(url) {
            const apiUrl = 'https://chromeuxreport.googleapis.com/v1/records:queryRecord';
            
            const postData = JSON.stringify({
              url: url,
              metrics: [
                'LARGEST_CONTENTFUL_PAINT',
                'FIRST_INPUT_DELAY',
                'CUMULATIVE_LAYOUT_SHIFT',
                'FIRST_CONTENTFUL_PAINT'
              ]
            });
            
            return new Promise((resolve) => {
              const options = {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': Buffer.byteLength(postData)
                }
              };
              
              const req = https.request(apiUrl, options, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                  try {
                    const result = JSON.parse(data);
                    if (result.error) {
                      resolve({ url, hasData: false, reason: result.error.message });
                    } else {
                      resolve({ url, hasData: true, data: result });
                    }
                  } catch (e) {
                    resolve({ url, hasData: false, reason: 'No real user data available' });
                  }
                });
              });
              
              req.on('error', () => resolve({ url, hasData: false, reason: 'Network error' }));
              req.write(postData);
              req.end();
            });
          }

          async function main() {
            const urls = JSON.parse(process.argv[2]);
            const results = [];
            
            for (const url of urls) {
              console.log(`üìä Fetching Web Vitals for: ${url}`);
              const result = await fetchWebVitals(url);
              results.push(result);
              
              // API Ìò∏Ï∂ú Í∞ÑÍ≤©
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            require('fs').writeFileSync(
              'performance-data/web-vitals.json',
              JSON.stringify(results, null, 2)
            );
            
            console.log('‚úÖ Web Vitals data saved');
          }

          main().catch(console.error);
          EOF

          # Web Vitals Ïã§Ìñâ
          node collect-vitals.js '${{ needs.check-execution-needed.outputs.test_urls }}'

      - name: Check performance thresholds and determine if should fail
        id: threshold_check
        run: |
          echo "üéØ Checking performance thresholds..."

          SHOULD_FAIL="false"
          FAILURE_REASONS=""

          # ÏûÑÍ≥ÑÍ∞í ÌôïÏù∏
          if [ -f "performance-config.json" ]; then
            FAIL_PERF=$(cat performance-config.json | jq -r '.failure_conditions.performance_score_below // 0.7')
            FAIL_LCP=$(cat performance-config.json | jq -r '.failure_conditions.lcp_above_ms // 4000') 
            FAIL_CLS=$(cat performance-config.json | jq -r '.failure_conditions.cls_above // 0.25')
            FAIL_A11Y=$(cat performance-config.json | jq -r '.failure_conditions.accessibility_below // 0.8')
          else
            FAIL_PERF=0.7
            FAIL_LCP=4000
            FAIL_CLS=0.25
            FAIL_A11Y=0.8
          fi

          echo "üéØ Failure thresholds:"
          echo "  Performance < $FAIL_PERF"
          echo "  LCP > ${FAIL_LCP}ms"
          echo "  CLS > $FAIL_CLS"
          echo "  Accessibility < $FAIL_A11Y"

          # Í∞Å ÌååÏùºÎ≥ÑÎ°ú ÏûÑÍ≥ÑÍ∞í Í≤ÄÏÇ¨
          for JSON_FILE in performance-data/lighthouse-*.json; do
            if [ -f "$JSON_FILE" ]; then
              URL=$(cat "$JSON_FILE" | jq -r '.requestedUrl')
              PERF=$(cat "$JSON_FILE" | jq -r '.categories.performance.score')
              A11Y=$(cat "$JSON_FILE" | jq -r '.categories.accessibility.score')
              LCP=$(cat "$JSON_FILE" | jq -r '.audits["largest-contentful-paint"].numericValue')
              CLS=$(cat "$JSON_FILE" | jq -r '.audits["cumulative-layout-shift"].numericValue')
              
              echo "üìä Checking: $URL"
              echo "  Performance: $PERF, A11y: $A11Y, LCP: ${LCP}ms, CLS: $CLS"
              
              # ÏûÑÍ≥ÑÍ∞í ÏúÑÎ∞ò Ï≤¥ÌÅ¨
              if [ $(echo "$PERF < $FAIL_PERF" | bc) -eq 1 ]; then
                SHOULD_FAIL="true"
                FAILURE_REASONS="$FAILURE_REASONS\n‚ùå $URL: Performance score ($PERF) below threshold ($FAIL_PERF)"
              fi
              
              if [ $(echo "$LCP > $FAIL_LCP" | bc) -eq 1 ]; then
                SHOULD_FAIL="true"
                FAILURE_REASONS="$FAILURE_REASONS\n‚ùå $URL: LCP (${LCP}ms) above threshold (${FAIL_LCP}ms)"
              fi
              
              if [ $(echo "$CLS > $FAIL_CLS" | bc) -eq 1 ]; then
                SHOULD_FAIL="true"
                FAILURE_REASONS="$FAILURE_REASONS\n‚ùå $URL: CLS ($CLS) above threshold ($FAIL_CLS)"
              fi
              
              if [ $(echo "$A11Y < $FAIL_A11Y" | bc) -eq 1 ]; then
                SHOULD_FAIL="true"
                FAILURE_REASONS="$FAILURE_REASONS\n‚ùå $URL: Accessibility ($A11Y) below threshold ($FAIL_A11Y)"
              fi
            fi
          done

          echo "should_fail=$SHOULD_FAIL" >> $GITHUB_OUTPUT
          echo "failure_reasons<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FAILURE_REASONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ "$SHOULD_FAIL" = "true" ]; then
            echo "üö® Performance thresholds violated!"
            echo -e "$FAILURE_REASONS"
          else
            echo "‚úÖ All performance thresholds passed"
          fi

      - name: Generate performance report
        run: |
          echo "üìä Generating performance report..."

          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          CONFIG_NAME="${{ needs.check-execution-needed.outputs.config_name }}"
          ENVIRONMENT="${{ needs.check-execution-needed.outputs.environment }}"
          COMMIT_HASH="${{ github.sha }}"
          BRANCH="${{ github.ref_name }}"
          ACTOR="${{ github.actor }}"

          mkdir -p report
          REPORT_FILE="report/performance-report-$TIMESTAMP.md"

          cat > $REPORT_FILE << EOF
          # üìä Flikary.dev Performance Report

          **Generated**: $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **Configuration**: \`$CONFIG_NAME\`  
          **Environment**: \`$ENVIRONMENT\`  
          **Build**: #${{ github.run_number }}  
          **Commit**: [\`${COMMIT_HASH:0:7}\`](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH)  
          **Branch**: \`$BRANCH\`  
          **Triggered by**: @$ACTOR

          ## üéØ Executive Summary

          Astro.js Í∏∞Î∞ò Í∞úÏù∏ ÏõπÏÇ¨Ïù¥Ìä∏Ïùò ÏÑ±Îä• Î∂ÑÏÑù Í≤∞Í≥ºÏûÖÎãàÎã§.

          $(if [ "${{ steps.threshold_check.outputs.should_fail }}" = "true" ]; then
            echo "üö® **Performance Issues Detected** - Action will fail due to threshold violations"
          else
            echo "‚úÖ **All Performance Thresholds Passed**"
          fi)

          EOF

          # Lighthouse Í≤∞Í≥º ÌÖåÏù¥Î∏î
          echo "## üß™ Lighthouse Performance Results" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "| Page | Performance | Accessibility | SEO | LCP | FCP | CLS | Status |" >> $REPORT_FILE
          echo "|------|-------------|---------------|-----|-----|-----|-----|--------|" >> $REPORT_FILE

          TOTAL_PERF=0
          PAGE_COUNT=0

          for JSON_FILE in performance-data/lighthouse-*.json; do
            if [ -f "$JSON_FILE" ]; then
              URL=$(cat "$JSON_FILE" | jq -r '.requestedUrl')
              PAGE_NAME=$(echo "$URL" | sed 's|.*/||' | sed 's|^$|ÌôàÌéòÏù¥ÏßÄ|')
              PERF=$(cat "$JSON_FILE" | jq -r '.categories.performance.score * 100 | floor')
              A11Y=$(cat "$JSON_FILE" | jq -r '.categories.accessibility.score * 100 | floor')
              SEO=$(cat "$JSON_FILE" | jq -r '.categories.seo.score * 100 | floor')
              LCP=$(cat "$JSON_FILE" | jq -r '.audits["largest-contentful-paint"].numericValue | floor')
              FCP=$(cat "$JSON_FILE" | jq -r '.audits["first-contentful-paint"].numericValue | floor')
              CLS=$(cat "$JSON_FILE" | jq -r '.audits["cumulative-layout-shift"].numericValue | . * 1000 | floor / 1000')
              
              # ÏÉÅÌÉú Í≤∞Ï†ï
              if [ $PERF -ge 90 ]; then
                STATUS="üü¢ Excellent"
              elif [ $PERF -ge 80 ]; then
                STATUS="üü° Good"
              elif [ $PERF -ge 70 ]; then
                STATUS="üü† Needs Work"
              else
                STATUS="üî¥ Poor"
              fi
              
              echo "| [$PAGE_NAME]($URL) | $PERF | $A11Y | $SEO | ${LCP}ms | ${FCP}ms | $CLS | $STATUS |" >> $REPORT_FILE
              
              TOTAL_PERF=$((TOTAL_PERF + PERF))
              PAGE_COUNT=$((PAGE_COUNT + 1))
            fi
          done

          echo "" >> $REPORT_FILE

          # ÌèâÍ∑† Ï†êÏàò
          if [ $PAGE_COUNT -gt 0 ]; then
            AVG_PERF=$((TOTAL_PERF / PAGE_COUNT))
            echo "**Average Performance Score**: $AVG_PERF/100" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
          fi

          # Web Vitals Í≤∞Í≥º
          if [ -f "performance-data/web-vitals.json" ]; then
            echo "## üåç Web Vitals (Real User Data)" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
            echo "| Page | Data Available | LCP (75th) | FID (75th) | CLS (75th) | Assessment |" >> $REPORT_FILE
            echo "|------|----------------|------------|------------|------------|------------|" >> $REPORT_FILE
            
            cat performance-data/web-vitals.json | jq -r '.[] | 
              if .hasData then
                .url as $url |
                .data.record.metrics as $metrics |
                ($metrics.largest_contentful_paint.percentiles.p75 // 0) as $lcp |
                ($metrics.first_input_delay.percentiles.p75 // 0) as $fid |
                ($metrics.cumulative_layout_shift.percentiles.p75 // 0) as $cls |
                (if ($lcp <= 2500 and $fid <= 100 and $cls <= 0.1) then "‚úÖ Good" 
                 elif ($lcp <= 4000 and $fid <= 300 and $cls <= 0.25) then "üü° Needs Improvement"
                 else "üî¥ Poor" end) as $status |
                "| " + $url + " | ‚úÖ Yes | " + ($lcp | tostring) + "ms | " + ($fid | tostring) + "ms | " + ($cls | tostring) + " | " + $status + " |"
              else
                "| " + .url + " | ‚ùå No | - | - | - | No real user data |"
              end' >> $REPORT_FILE
            
            echo "" >> $REPORT_FILE
          fi

          # ÏûÑÍ≥ÑÍ∞í ÏúÑÎ∞ò ÏÇ¨Ìï≠ (ÏûàÎäî Í≤ΩÏö∞)
          if [ "${{ steps.threshold_check.outputs.should_fail }}" = "true" ]; then
            echo "## üö® Performance Issues" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
            echo "Îã§Ïùå ÌéòÏù¥ÏßÄÎì§Ïù¥ ÏÑ±Îä• ÏûÑÍ≥ÑÍ∞íÏùÑ ÏúÑÎ∞òÌñàÏäµÎãàÎã§:" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
            echo "${{ steps.threshold_check.outputs.failure_reasons }}" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
          fi

          # ÏÉÅÏÑ∏ Î∂ÑÏÑù Î∞è Í∂åÏû•ÏÇ¨Ìï≠
          cat >> $REPORT_FILE << EOF

          ## üìà Detailed Analysis

          ### üéØ Key Insights

          - **Framework**: Astro.js Ï†ïÏ†Å ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±Í∏∞ ÏÇ¨Ïö©
          - **Average Performance**: $(if [ $PAGE_COUNT -gt 0 ]; then echo "$AVG_PERF/100"; else echo "N/A"; fi)
          - **Test Environment**: $ENVIRONMENT
          - **Pages Analyzed**: $PAGE_COUNT

          ### üí° Optimization Recommendations

          $(if [ $AVG_PERF -lt 80 ] 2>/dev/null; then
            echo "#### üî¥ High Priority"
            echo "- **Performance Score**: Ï†ÑÏ≤¥Ï†ÅÏù∏ ÏÑ±Îä• Í∞úÏÑ† ÌïÑÏöî"
            echo "- **Bundle Optimization**: JavaScript Î≤àÎì§ ÌÅ¨Í∏∞ ÏµúÏ†ÅÌôî"
            echo "- **Image Optimization**: Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï Î∞è WebP Ìè¨Îß∑ Ï†ÅÏö©"
            echo ""
          fi)

          #### üü° Medium Priority
          - **Astro Islands**: Ïù∏ÌÑ∞ÎûôÌã∞Î∏å Ïª¥Ìè¨ÎÑåÌä∏Î•º Astro IslandsÎ°ú ÏµúÏ†ÅÌôî
          - **Static Generation**: Í∞ÄÎä•Ìïú Î™®Îì† ÌéòÏù¥ÏßÄÎ•º Ï†ïÏ†Å ÏÉùÏÑ±ÏúºÎ°ú Ï†ÑÌôò
          - **CSS Optimization**: ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî CSS Ï†úÍ±∞

          #### üü¢ Low Priority
          - **SEO Enhancement**: Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Î∞è Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Í∞úÏÑ†
          - **Accessibility**: Ï†ëÍ∑ºÏÑ± Ï†êÏàò 95+ Î™©Ìëú
          - **PWA Features**: ÏÑúÎπÑÏä§ ÏõåÏª§ Î∞è Ïò§ÌîÑÎùºÏù∏ Í∏∞Îä• Ï∂îÍ∞Ä

          ## üîß Technical Details

          ### Astro Configuration
          - **Framework**: Astro.js
          - **Build Command**: \`npm run build\`
          - **Preview Command**: \`npm run preview\`
          - **Source Directory**: \`src/\`
          - **Output Directory**: \`dist/\`

          ### Test Configuration
          - **Configuration**: $CONFIG_NAME
          - **Environment**: $ENVIRONMENT
          - **Lighthouse Version**: $(lighthouse --version 2>/dev/null || echo "latest")
          - **Chrome Flags**: --no-sandbox --disable-dev-shm-usage
          - **Preset**: Desktop

          ### Commit Information
          - **Commit Hash**: \`$COMMIT_HASH\`
          - **Branch**: \`$BRANCH\`
          - **Author**: @$ACTOR
          - **Timestamp**: $(date)

          ### Performance Thresholds
          $(if [ -f "performance-config.json" ]; then
            cat performance-config.json | jq -r '.failure_conditions | 
              "- **Performance Score**: Must be ‚â• " + (.performance_score_below | tostring),
              "- **LCP**: Must be ‚â§ " + (.lcp_above_ms | tostring) + "ms",
              "- **CLS**: Must be ‚â§ " + (.cls_above | tostring),
              "- **Accessibility**: Must be ‚â• " + (.accessibility_below | tostring)'
          else
            echo "- **Performance Score**: Must be ‚â• 0.7"
            echo "- **LCP**: Must be ‚â§ 4000ms"
            echo "- **CLS**: Must be ‚â§ 0.25"
            echo "- **Accessibility**: Must be ‚â• 0.8"
          fi)

          ## üìä Historical Context

          Ïù¥ Î¶¨Ìè¨Ìä∏Îäî flikary.devÏùò ÏßÄÏÜçÏ†ÅÏù∏ ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅÏùò ÏùºÎ∂ÄÏûÖÎãàÎã§:

          - **Daily Monitoring**: main Î∏åÎûúÏπò Ïª§Î∞ãÏãú ÏûêÎèô Ïã§Ìñâ
          - **Fallback Schedule**: 24ÏãúÍ∞Ñ ÎÇ¥ Ïã§ÌñâÏù¥ ÏóÜÏúºÎ©¥ Ïò§Ï†Ñ 4Ïãú ÏûêÎèô Ïã§Ìñâ
          - **Failure Conditions**: ÏÑ±Îä• ÏûÑÍ≥ÑÍ∞í ÏúÑÎ∞òÏãú GitHub Action Ïã§Ìå®

          ## üîó Quick Links

          - üåê [flikary.dev](https://flikary.dev)
          - üîç [Preview Environment](https://preview.flikary.dev)
          - üìä [GitHub Repository](https://github.com/${{ github.repository }})
          - üîß [Performance Config](https://github.com/${{ github.repository }}/blob/main/performance-config.json)

          ---

          **ü§ñ Automated Performance Report** | Generated by Performance CI | flikary.dev
          EOF

          echo "‚úÖ Performance report generated: $REPORT_FILE"

      - name: Commit performance report
        run: |
          git config --local user.email "performance-bot@flikary.dev"
          git config --local user.name "Flikary Performance Bot"

          git add report/
          git add performance-data/

          if ! git diff --staged --quiet; then
            git commit -m "üìä Performance report $(date +%Y-%m-%d_%H-%M-%S)
            
            üéØ Config: ${{ needs.check-execution-needed.outputs.config_name }}
            üåê Environment: ${{ needs.check-execution-needed.outputs.environment }}
            üì¶ Commit: ${GITHUB_SHA:0:7}
            üåø Branch: ${{ github.ref_name }}
            üî® Build: #${{ github.run_number }}
            $(if [ "${{ steps.threshold_check.outputs.should_fail }}" = "true" ]; then echo "üö® Threshold violations detected"; else echo "‚úÖ All thresholds passed"; fi)"
            
            git push
            echo "‚úÖ Performance report committed to repository"
          else
            echo "üì≠ No new performance data to commit"
          fi

      - name: Performance summary for GitHub Actions
        run: |
          echo "## üéØ Flikary.dev Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Config**: ${{ needs.check-execution-needed.outputs.config_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.check-execution-needed.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.threshold_check.outputs.should_fail }}" = "true" ]; then
            echo "### üö® Performance Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.threshold_check.outputs.failure_reasons }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Result**: This workflow will fail due to performance threshold violations." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ All Performance Thresholds Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Result**: All performance metrics are within acceptable thresholds." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÑ **Detailed Report**: \`report/performance-report-$(date +%Y-%m-%d_%H-%M-%S).md\`" >> $GITHUB_STEP_SUMMARY

      - name: Fail if performance thresholds violated
        if: steps.threshold_check.outputs.should_fail == 'true'
        run: |
          echo "üö® Performance thresholds were violated!"
          echo ""
          echo "Failure reasons:"
          echo "${{ steps.threshold_check.outputs.failure_reasons }}"
          echo ""
          echo "üìÑ Check the detailed report in the report/ directory for more information."
          echo "üîß Review the performance-config.json file to adjust thresholds if needed."
          exit 1

  skip-notification:
    needs: check-execution-needed
    if: needs.check-execution-needed.outputs.should_run == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip notification
        run: |
          echo "## ‚è≠Ô∏è Performance Test Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "**Reason**: Performance test already executed successfully within the last 24 hours" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Reason**: No performance-impacting files were changed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next scheduled run**: Daily at 4:00 AM KST if no successful runs in 24 hours" >> $GITHUB_STEP_SUMMARY
