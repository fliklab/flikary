name: Flikary.dev Performance Monitoring

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "public/**"
      - "astro.config.mjs"
      - "package.json"
      - "package-lock.json"
      - "performance-config.json"
      - "tailwind.config.js"
      - "tsconfig.json"

  # 24ÏãúÍ∞Ñ ÎèôÏïà Ïã§Ìñâ ÏïàÎêú Í≤ΩÏö∞ Ïò§Ï†Ñ 4ÏãúÏóê Ïã§Ìñâ (KST Í∏∞Ï§Ä)
  schedule:
    - cron: "0 19 * * *" # UTC 19:00 = KST 04:00

  workflow_dispatch:
    inputs:
      test_config:
        description: "ÌÖåÏä§Ìä∏ Íµ¨ÏÑ±"
        required: true
        default: "quick"
        type: choice
        options:
          - "quick"
          - "comprehensive"
          - "blog_focus"
      environment:
        description: "ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω"
        required: true
        default: "production"
        type: choice
        options:
          - "local"
          - "staging"
          - "production"
      force_run:
        description: "Í∞ïÏ†ú Ïã§Ìñâ (ÌååÏùº Î≥ÄÍ≤Ω Ïó¨Î∂Ä Î¨¥Ïãú)"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "18"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_EVENT_NAME: ${{ github.event_name }}
  GITHUB_API_URL: ${{ github.api_url }}
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF_NAME: ${{ github.ref_name }}
  GITHUB_ACTOR: ${{ github.actor }}
  GITHUB_RUN_NUMBER: ${{ github.run_number }}
  INPUT_FORCE_RUN: ${{ inputs.force_run }}
  INPUT_TEST_CONFIG: ${{ inputs.test_config }}
  INPUT_ENVIRONMENT: ${{ inputs.environment }}

jobs:
  check-execution-needed:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      config_name: ${{ steps.config.outputs.config_name }}
      environment: ${{ steps.config.outputs.environment }}
      test_urls: ${{ steps.urls.outputs.test_urls }}
      page_names: ${{ steps.urls.outputs.page_names }}
      timestamp: ${{ steps.timestamp.outputs.value }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          pnpm install

      - name: Generate timestamp
        id: timestamp
        run: echo "value=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Check if performance test should run
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_API_URL: ${{ github.api_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          INPUT_FORCE_RUN: ${{ inputs.force_run }}
        run: ./scripts/performance/check-execution.sh

      - name: Determine test configuration
        id: config
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          INPUT_TEST_CONFIG: ${{ inputs.test_config }}
          INPUT_ENVIRONMENT: ${{ inputs.environment }}
        run: ./scripts/performance/determine-config.sh

      - name: Generate test URLs from config
        id: urls
        run: |
          # GITHUB_OUTPUT ÌååÏùº Í≤ΩÎ°ú ÏÑ§Ï†ï Î∞è ÏÉùÏÑ±
          if [ -z "$GITHUB_OUTPUT" ]; then
            export GITHUB_OUTPUT="/tmp/github_output_$$"
            echo "üîß Debug: GITHUB_OUTPUT not set, creating temporary file: $GITHUB_OUTPUT"
          else
            echo "üîß Debug: Using existing GITHUB_OUTPUT: $GITHUB_OUTPUT"
          fi

          touch "$GITHUB_OUTPUT"
          chmod 666 "$GITHUB_OUTPUT" 2>/dev/null || true

          # Ubuntu Ìå®ÌÇ§ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ Î∞è ÌïÑÏàò ÎèÑÍµ¨ ÏÑ§Ïπò
          echo "üì¶ Installing required packages..."
          sudo apt-get update -qq
          sudo apt-get install -y jq curl git bc

          # Î°úÏºÄÏùº ÏÑ§Ï†ï (ÌïúÍ∏Ä Ï≤òÎ¶¨Î•º ÏúÑÌï¥)
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8

          # Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Í∂åÌïú ÌôïÏù∏ Î∞è ÏÑ§Ï†ï
          echo "üîß Setting script permissions..."
          chmod +x scripts/performance/*.sh

          # ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ Ï∂úÎ†•
          echo "üîß Debug: Current working directory: $(pwd)"
          echo "üîß Debug: User: $(whoami)"
          echo "üîß Debug: Shell: $0"
          echo "üîß Debug: Bash version: $BASH_VERSION"
          echo "üîß Debug: GITHUB_OUTPUT file: $GITHUB_OUTPUT (exists: $(test -f "$GITHUB_OUTPUT" && echo "yes" || echo "no"))"

          # Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
          echo "üöÄ Executing script with explicit GITHUB_OUTPUT..."
          if GITHUB_OUTPUT="$GITHUB_OUTPUT" bash -x ./scripts/performance/generate-urls.sh \
            "${{ steps.config.outputs.config_name }}" \
            "${{ steps.config.outputs.environment }}"; then
            echo "‚úÖ Script execution successful"
          else
            echo "‚ùå Script execution failed with exit code $?"
            
            # Ïã§Ìå®Ìïú Í≤ΩÏö∞ Í∏∞Î≥∏Í∞íÏúºÎ°ú ÎåÄÏ≤¥
            echo "üîß Using fallback values..."
            echo "test_urls=[\"https://flikary.dev/\", \"https://flikary.dev/resume\", \"https://flikary.dev/archives\"]" >> "$GITHUB_OUTPUT"
            echo "page_names=[\"ÌôàÌéòÏù¥ÏßÄ\", \"Ïù¥Î†•ÏÑú\", \"ÏïÑÏπ¥Ïù¥Î∏å\"]" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Fallback values set"
          fi

          # GITHUB_OUTPUT ÎÇ¥Ïö© ÌôïÏù∏
          echo "üîß Debug: GITHUB_OUTPUT contents:"
          cat "$GITHUB_OUTPUT" || echo "Failed to read GITHUB_OUTPUT file"

          # GitHub Actions step outputsÏúºÎ°ú Í∞í Ï∂îÏ∂ú
          if [ -f "$GITHUB_OUTPUT" ]; then
            TEST_URLS=$(grep "^test_urls=" "$GITHUB_OUTPUT" | cut -d'=' -f2- || echo '["https://flikary.dev/"]')
            PAGE_NAMES=$(grep "^page_names=" "$GITHUB_OUTPUT" | cut -d'=' -f2- || echo '["ÌôàÌéòÏù¥ÏßÄ"]')
            
            echo "test_urls=$TEST_URLS" >> $GITHUB_OUTPUT
            echo "page_names=$PAGE_NAMES" >> $GITHUB_OUTPUT
            
            echo "üîß Debug: Extracted test_urls: $TEST_URLS"
            echo "üîß Debug: Extracted page_names: $PAGE_NAMES"
          fi

  performance-test:
    needs: check-execution-needed
    if: needs.check-execution-needed.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    env:
      TIMESTAMP: ${{ needs.check-execution-needed.outputs.timestamp }}
      PERFORMANCE_DATA_DIR: .github/performance-reports/data/${{ needs.check-execution-needed.outputs.timestamp }}
      PERFORMANCE_REPORT_DIR: .github/performance-reports/reports/${{ needs.check-execution-needed.outputs.timestamp }}
      GITHUB_SHA: ${{ github.sha }}
      GITHUB_REF_NAME: ${{ github.ref_name }}
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_RUN_NUMBER: ${{ github.run_number }}
      GITHUB_REPOSITORY: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          pnpm install

      - name: Build Astro site
        if: needs.check-execution-needed.outputs.environment == 'local'
        run: |
          echo "üî® Building Astro site..."
          pnpm run build

      - name: Start local preview server
        if: needs.check-execution-needed.outputs.environment == 'local'
        run: |
          echo "üöÄ Starting Astro preview server..."
          pnpm run preview &

          # ÏÑúÎ≤Ñ Ï§ÄÎπÑ ÎåÄÍ∏∞
          echo "‚è≥ Waiting for Astro server to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:4321 >/dev/null 2>&1; then
              echo "‚úÖ Astro server is ready after ${i} attempts"
              break
            else
              echo "‚è≥ Attempt $i: Server not ready yet..."
              sleep 2
            fi
            
            if [ $i -eq 30 ]; then
              echo "‚ùå Astro server failed to start after 60 seconds"
              exit 1
            fi
          done

      - name: Install Lighthouse
        run: |
          echo "üí° Installing Lighthouse..."
          pnpm install -g lighthouse

      - name: Create performance directories
        run: |
          mkdir -p "$PERFORMANCE_DATA_DIR"
          mkdir -p "$PERFORMANCE_REPORT_DIR"

      - name: Run comprehensive performance tests
        run: |
          ./scripts/performance/run-lighthouse.sh \
            '${{ needs.check-execution-needed.outputs.test_urls }}' \
            '${{ needs.check-execution-needed.outputs.page_names }}' \
            "${{ needs.check-execution-needed.outputs.config_name }}" \
            "${{ needs.check-execution-needed.outputs.environment }}" \
            "$PERFORMANCE_DATA_DIR"

      - name: Collect Web Vitals (Real User Data)
        run: |
          echo "üåç Collecting Web Vitals data..."
          node ./scripts/performance/collect-web-vitals.js \
            '${{ needs.check-execution-needed.outputs.test_urls }}' \
            "$PERFORMANCE_DATA_DIR/web-vitals.json"

      - name: Check performance thresholds and determine if should fail
        id: threshold_check
        run: |
          ./scripts/performance/check-thresholds.sh "$PERFORMANCE_DATA_DIR"

      - name: Generate performance report
        run: |
          ./scripts/performance/generate-report.sh \
            "${{ needs.check-execution-needed.outputs.config_name }}" \
            "${{ needs.check-execution-needed.outputs.environment }}" \
            "${{ steps.threshold_check.outputs.should_fail }}" \
            "${{ steps.threshold_check.outputs.failure_reasons }}" \
            "$PERFORMANCE_DATA_DIR" \
            "$PERFORMANCE_REPORT_DIR"

      - name: Upload performance data
        uses: actions/upload-artifact@v4
        with:
          name: performance-data-${{ env.TIMESTAMP }}
          path: ${{ env.PERFORMANCE_DATA_DIR }}
          retention-days: 90

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ env.TIMESTAMP }}
          path: ${{ env.PERFORMANCE_REPORT_DIR }}
          retention-days: 90

      - name: Commit performance results
        run: |
          git config --local user.email "performance-bot@flikary.dev"
          git config --local user.name "Flikary Performance Bot"

          git add .github/performance-reports/

          if ! git diff --staged --quiet; then
            git commit -m "üìä Performance report ${{ env.TIMESTAMP }}
            
            üéØ Config: ${{ needs.check-execution-needed.outputs.config_name }}
            üåê Environment: ${{ needs.check-execution-needed.outputs.environment }}
            üì¶ Commit: ${GITHUB_SHA:0:7}
            üåø Branch: ${{ github.ref_name }}
            üî® Build: #${{ github.run_number }}
            $(if [ "${{ steps.threshold_check.outputs.should_fail }}" = "true" ]; then echo "üö® Threshold violations detected"; else echo "‚úÖ All thresholds passed"; fi)"
            
            git push
            echo "‚úÖ Performance results committed to repository"
          else
            echo "üì≠ No new performance data to commit"
          fi

      - name: Performance summary for GitHub Actions
        run: |
          echo "## üéØ Flikary.dev Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Config**: ${{ needs.check-execution-needed.outputs.config_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.check-execution-needed.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.threshold_check.outputs.should_fail }}" = "true" ]; then
            echo "### üö® Performance Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.threshold_check.outputs.failure_reasons }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Result**: This workflow will fail due to performance threshold violations." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ All Performance Thresholds Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Result**: All performance metrics are within acceptable thresholds." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÑ **Detailed Report**: \`report/performance-report-$(date +%Y-%m-%d_%H-%M-%S).md\`" >> $GITHUB_STEP_SUMMARY

      - name: Fail if performance thresholds violated
        if: steps.threshold_check.outputs.should_fail == 'true'
        run: |
          echo "üö® Performance thresholds were violated!"
          echo ""
          echo "Failure reasons:"
          echo "${{ steps.threshold_check.outputs.failure_reasons }}"
          echo ""
          echo "üìÑ Check the detailed report in the report/ directory for more information."
          echo "üîß Review the performance-config.json file to adjust thresholds if needed."
          exit 1

  skip-notification:
    needs: check-execution-needed
    if: needs.check-execution-needed.outputs.should_run == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip notification
        run: |
          echo "## ‚è≠Ô∏è Performance Test Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "**Reason**: Performance test already executed successfully within the last 24 hours" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Reason**: No performance-impacting files were changed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next scheduled run**: Daily at 4:00 AM KST if no successful runs in 24 hours" >> $GITHUB_STEP_SUMMARY
